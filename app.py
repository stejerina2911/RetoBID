import streamlit as st
import joblib
import numpy as np
import pandas as pd

# Importar librer√≠as para gr√°ficos
import shap
from streamlit_shap import st_shap

# Configuraci√≥n de la p√°gina
st.set_page_config(
    page_title="Predicci√≥n de Probabilidad de Empleo",
    layout="centered",
    initial_sidebar_state="auto"
)

# Funci√≥n para cargar el modelo
@st.cache_resource
def load_model():
    return joblib.load('random_forest_modelSTM2.joblib')

# Cargar el modelo
rf = load_model()

# Inicializar el estado de la aplicaci√≥n
if 'app_started' not in st.session_state:
    st.session_state.app_started = False

# T√≠tulo de la aplicaci√≥n
st.title("üßë‚Äçüíº Predicci√≥n de Probabilidad de Empleo")

# --- P√°gina de inicio ---
if not st.session_state.app_started:
    # --- Introducci√≥n y Contexto ---
    st.header("Introducci√≥n y Contexto")
    st.markdown("""
    La discriminaci√≥n ling√º√≠stica hacia los hablantes de lenguas ind√≠genas es una problem√°tica significativa en M√©xico. A pesar de ser un pa√≠s con 68 lenguas ind√≠genas registradas y una riqueza cultural invaluable, los hablantes de estas lenguas enfrentan barreras estructurales y culturales que limitan su acceso a oportunidades laborales.

    Datos del Censo de Poblaci√≥n y Vivienda 2020 muestran que la probabilidad de empleo disminuye un 10.98% para los hablantes de lenguas ind√≠genas, incluso despu√©s de ajustar por factores sociodemogr√°ficos como educaci√≥n, edad y g√©nero. De acuerdo con la Ley General de Derechos Ling√º√≠sticos de los Pueblos Ind√≠genas, estas comunidades tienen el derecho de comunicarse en su lengua, sin ninguna forma de restricci√≥n en todas sus actividades sociales (Ley General de Derechos Ling√º√≠sticos de los Pueblos Ind√≠genas, 2003, Art. 9). Esto significa que el idioma no deber√≠a representar una barrera para las oportunidades de empleo de quienes hablan lenguas ind√≠genas. Sin embargo, en la pr√°ctica, esta teor√≠a a menudo se aleja de la realidad.

    Esta exclusi√≥n no solo afecta la equidad social, sino que tambi√©n perpet√∫a la desigualdad econ√≥mica, particularmente entre las comunidades ind√≠genas m√°s vulnerables. En este contexto, comprender el impacto de las barreras ling√º√≠sticas en la inserci√≥n laboral y desarrollar estrategias para mitigar estas disparidades es esencial.

    ### Objetivo de la Herramienta Interactiva
    La calculadora de probabilidad de empleo dise√±ada como una aplicaci√≥n tiene como objetivo:

    - **Visualizar** el impacto de factores ling√º√≠sticos y sociodemogr√°ficos sobre las probabilidades de empleo.
    - **Fomentar** una f√°cil comprensi√≥n de los resultados del an√°lisis, al presentar de manera interactiva c√≥mo distintas variables (como el biling√ºismo o el nivel educativo) afectan las oportunidades laborales.
    - **Sensibilizar** a los usuarios acerca de la discriminaci√≥n ling√º√≠stica y su rol en perpetuar la desigualdad en el mercado laboral mexicano.

    Mediante esta herramienta, buscamos no solo presentar los resultados de nuestro modelo de an√°lisis, sino tambi√©n ofrecer una plataforma educativa que conecte estos datos con su contexto real, ayudando a generar conciencia y apoyar en el dise√±o de pol√≠ticas p√∫blicas m√°s inclusivas.
    """)

    # --- Presentaci√≥n de los Autores ---
    st.header("Autores del Trabajo")

    # Informaci√≥n de los autores (reemplaza con tus datos y enlaces)
    autores = [
        {
            'nombre': 'Santiago Tejerina Marion',
            'descripcion': 'Carrera: Econom√≠a\nSemestre: 7mo',
            'imagen': 'https://media.licdn.com/dms/image/v2/D4E03AQFpwzaRL1NWfA/profile-displayphoto-shrink_800_800/profile-displayphoto-shrink_800_800/0/1676928415244?e=1738195200&v=beta&t=5nEyBjyvZWoab6voJqRWU7iLyX3h2OYLbjkjixyVUPM',  # Reemplaza con el enlace a la foto del autor
            'cv': 'https://www.linkedin.com/in/santiago-tejerina-marion/'   # Reemplaza con el enlace al CV del autor
        },
        {
            'nombre': 'Uriel Alejandro Zavala Arrambide',
            'descripcion': 'Carrera: Econom√≠a\nSemestre: 7mo',
            'imagen': 'https://media.licdn.com/dms/image/v2/D4E03AQFYUiG7AkIKTw/profile-displayphoto-shrink_400_400/profile-displayphoto-shrink_400_400/0/1731301872073?e=1738195200&v=beta&t=ByKBe3tiowftTvXOWUlFxfTDQG2g4V-rg0DQutlguLc',
            'cv': 'https://www.linkedin.com/in/uriel-zavala/'
        },
        {
            'nombre': 'Edgar Karel Mart√≠nez Mendoza',
            'descripcion': 'Carrera: Econom√≠a\nSemestre: 7mo',
            'imagen': 'https://media.licdn.com/dms/image/v2/D5603AQG6f787eTDx-g/profile-displayphoto-shrink_800_800/B56ZN6RvJMGwAg-/0/1732923290996?e=1738800000&v=beta&t=5k9sRPAAMEJWLlctSMgmrrF6gMJVZ3-hUDje5o6OYe0',
            'cv': 'https://www.linkedin.com/in/edgar-karel-mart%C3%ADnez-mendoza-80a14b259/'
        },
        {
            'nombre': 'Mauricio Bernal Cisneros',
            'descripcion': 'Carrera: Econom√≠a\nSemestre: 7mo',
            'imagen': 'https://media.licdn.com/dms/image/v2/D5603AQGXNPSbFdvbUA/profile-displayphoto-shrink_400_400/profile-displayphoto-shrink_400_400/0/1732419327764?e=1738195200&v=beta&t=aGNaCGqnRPsmgBoScbAYafattDyUsC0jApq4cs37boQ',
            'cv': 'https://www.linkedin.com/in/mauricio-bernal-cisneros-138a88249/'
        }
    ]

    # Mostrar informaci√≥n de los autores
    cols = st.columns(len(autores))

    for idx, col in enumerate(cols):
        autor = autores[idx]
        with col:
            st.image(autor['imagen'], width=150, caption=autor['nombre'])
            st.markdown(f"**{autor['nombre']}**")
            st.markdown(autor['descripcion'])
            st.markdown(f"[Ver Linkedin]({autor['cv']})")

    # Espacio adicional
    st.write("\n")

    # Centrar el bot√≥n "Iniciar Aplicaci√≥n"
    col_empty1, col_button, col_empty2 = st.columns([1, 2, 1])
    with col_button:
        if st.button("Iniciar Aplicaci√≥n"):
            st.session_state.app_started = True


# --- Aplicaci√≥n Interactiva ---
if st.session_state.app_started:
    # Bot√≥n para regresar a la p√°gina de inicio
    if st.button("Regresar a la P√°gina de Inicio"):
        st.session_state.app_started = False


    # --- Entradas del usuario ---
    st.header("Ingrese sus datos a continuaci√≥n")

    st.write("Complete el siguiente formulario para calcular la probabilidad de que usted tenga empleo y descubra qu√© factores influyen m√°s en su situaci√≥n laboral.")

    # Variables binarias (dummies)
    jefehogar = st.selectbox("¬øEs usted jefe de hogar?", ("No", "S√≠"))
    hombre = st.selectbox("¬øCu√°l es su g√©nero?", ("Mujer", "Hombre"))
    rural = st.selectbox("¬øVive en una zona rural?", ("No", "S√≠"))
    HLENGUA = st.selectbox("¬øHabla una lengua ind√≠gena?", ("No", "S√≠"))
    casado = st.selectbox("¬øEst√° usted casado(a)?", ("No", "S√≠"))
    Ident_Indigena = st.selectbox("¬øSe identifica como ind√≠gena?", ("No", "S√≠"))

    # Variables continuas
    ESCOACUM = st.slider("A√±os de educaci√≥n acumulada", min_value=0, max_value=30, value=12)
    EDAD = st.slider("Edad", min_value=15, max_value=100, value=30)

    # Calcular EDAD2
    EDAD2 = EDAD ** 2

    # Convertir entradas a 0 y 1
    def convert_to_binary(value):
        return 1 if value == "S√≠" or value == "Hombre" else 0

    jefehogar_bin = convert_to_binary(jefehogar)
    hombre_bin = convert_to_binary(hombre)
    rural_bin = convert_to_binary(rural)
    HLENGUA_bin = convert_to_binary(HLENGUA)
    casado_bin = convert_to_binary(casado)
    Ident_Indigena_bin = convert_to_binary(Ident_Indigena)

    # Calcular 'hombrecasado' como una combinaci√≥n de 'hombre' y 'casado'
    hombrecasado_bin = hombre_bin * casado_bin  # Multiplicaci√≥n l√≥gica (AND)

    # Crear el array de caracter√≠sticas en el orden correcto
    features = np.array([[
        jefehogar_bin, hombre_bin, rural_bin, ESCOACUM, EDAD, EDAD2,
        HLENGUA_bin, hombrecasado_bin, casado_bin, Ident_Indigena_bin
    ]])

    feature_names = ['jefehogar', 'hombre', 'rural', 'ESCOACUM', 'EDAD', 'EDAD2',
                     'HLENGUA', 'hombrecasado', 'casado', 'Ident_Indigena']

    # Diccionario de nombres amigables
    feature_name_mapping = {
        'jefehogar': 'Jefe de hogar',
        'hombre': 'G√©nero masculino',
        'rural': 'Vive en zona rural',
        'ESCOACUM': 'A√±os de educaci√≥n acumulada',
        'EDAD': 'Edad',
        'EDAD2': 'Edad al cuadrado',
        'HLENGUA': 'Habla lengua ind√≠gena',
        'hombrecasado': 'Hombre casado',
        'casado': 'Est√° casado(a)',
        'Ident_Indigena': 'Se identifica como ind√≠gena'
    }

    # Lista de variables binarias
    binary_features = ['jefehogar', 'hombre', 'rural', 'HLENGUA', 'hombrecasado', 'casado', 'Ident_Indigena']
    binary_feature_names = [feature_name_mapping[name] for name in binary_features]

    # Cargar el explainer de SHAP
    @st.cache_resource
    def load_explainer(_model):
        return shap.TreeExplainer(_model)

    explainer = load_explainer(rf)

    # Bot√≥n para realizar la predicci√≥n
    if st.button("Calcular probabilidad de empleo"):
        # Realizar la predicci√≥n
        probabilidad = rf.predict_proba(features)[0][1]  # Probabilidad de tener empleo

        st.subheader(f"üîé Su probabilidad de tener empleo es: **{probabilidad * 100:.2f}%**")

        # Calcular los valores SHAP para la instancia
        shap_values = explainer.shap_values(features)

        # Acceder a los valores SHAP para la clase positiva (clase 1)
        influencia = shap_values[0][:, 1]  # Instancia 0, todas las caracter√≠sticas, clase 1

        # Crear una lista de nombres amigables de caracter√≠sticas
        user_friendly_feature_names = [feature_name_mapping.get(name, name) for name in feature_names]

        # Crear un DataFrame para los valores SHAP
        shap_df = pd.DataFrame({
            'Caracter√≠stica': user_friendly_feature_names,
            'Valor': features[0],
            'Influencia': influencia
        })

        # Mapear los valores de las variables binarias a 'S√≠' o 'No'
        def map_binary_value(row):
            if row['Caracter√≠stica'] in binary_feature_names:
                return 'S√≠' if row['Valor'] == 1 else 'No'
            else:
                return row['Valor']

        shap_df['Valor'] = shap_df.apply(map_binary_value, axis=1)

        # Redondear los valores de influencia
        shap_df['Influencia'] = shap_df['Influencia'].round(4)

        # Calcular el valor absoluto de las influencias
        shap_df['Influencia_abs'] = np.abs(shap_df['Influencia'])

        # Calcular el porcentaje de influencia
        total_influencia_abs = shap_df['Influencia_abs'].sum()
        shap_df['Influencia_%'] = (shap_df['Influencia_abs'] / total_influencia_abs) * 100
        shap_df['Influencia_%'] = shap_df['Influencia_%'].round(2)

        # Crear una interpretaci√≥n para cada caracter√≠stica
        def interpretar_influencia(row):
            efecto = 'aumenta' if row['Influencia'] > 0 else 'disminuye'
            return f"{efecto.capitalize()} su probabilidad de empleo en un {row['Influencia_%']}%"

        shap_df['Interpretaci√≥n'] = shap_df.apply(interpretar_influencia, axis=1)

        # Ordenar por valor absoluto de influencia
        shap_df = shap_df.sort_values(by='Influencia_abs', ascending=False)

        # Mostrar tabla de influencias con interpretaciones
        st.write("### Factores que m√°s influyen en su predicci√≥n:")
        st.table(shap_df[['Caracter√≠stica', 'Valor', 'Influencia', 'Interpretaci√≥n']].head(10))

        # Mostrar gr√°fico de SHAP values
        st.write("### Visualizaci√≥n de la influencia de cada factor:")
        shap.initjs()
        force_plot = shap.force_plot(explainer.expected_value[1], influencia, features[0], feature_names=user_friendly_feature_names)
        st_shap(force_plot)

        st.info("Puede ajustar las caracter√≠sticas y volver a calcular para ver c√≥mo cambia la probabilidad.")

